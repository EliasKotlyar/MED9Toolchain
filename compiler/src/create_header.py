import os

from .abstract_step import AbstractStep


class CreateHeader(AbstractStep):
    def run(self):
        # Implementation of the run method from the AbstractStep class.
        # It performs the header creation process by calling the necessary methods.

        values = self.parse_analysis()  # Parse the analysis.json file
        header_content = self.generate_header(values)  # Generate the header content
        self.write_header(header_content)  # Write the header content to a file

    def generate_header(self, variables: []):
        # Method for generating the header content based on the analyzed variables.
        # It takes the variables dictionary as input and constructs the header content using string formatting.

        header_contents = '''
        # include <stdint.h>
        # define READ_RAM_BYTE(address) (*((uint8_t *)(address)))
        '''

        for name, value in variables.items():
            header_contents += f'#define {name} {value}\n'

        return header_contents

    def write_header(self, header_content: str):
        # Method for writing the header content to a file.
        # It takes the header content as input and writes it to a file named "autogenerated.h" in the working directory.

        header_script = os.path.join(self.workdir, 'autogenerated.h')

        with open(header_script, 'w') as file:
            file.write(header_content)
